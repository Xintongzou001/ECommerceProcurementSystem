// <auto-generated />
using System;
using ECommerceProcurementSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceProcurementSystem.Migrations
{
    [DbContext(typeof(ProcurementContext))]
    [Migration("20250506042634_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceProcurementSystem.Models.AnnualReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<decimal>("SaleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Vendor_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("Vendor_Code");

                    b.ToTable("AnnualReports");
                });

            modelBuilder.Entity("ECommerceProcurementSystem.Models.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ECommerceProcurementSystem.Models.Commodity", b =>
                {
                    b.Property<string>("CommodityID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Commodity_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommodityID");

                    b.ToTable("Commodities");
                });

            modelBuilder.Entity("ECommerceProcurementSystem.Models.MasterAgreement", b =>
                {
                    b.Property<string>("Master_Agreement")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Award_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Contract_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Master_Agreement");

                    b.ToTable("MasterAgreements");
                });

            modelBuilder.Entity("ECommerceProcurementSystem.Models.PurchaseOrder", b =>
                {
                    b.Property<string>("Purchase_Order")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Master_Agreement")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vendor_Code")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Purchase_Order");

                    b.HasIndex("Master_Agreement");

                    b.HasIndex("Vendor_Code");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("ECommerceProcurementSystem.Models.PurchaseOrderLine", b =>
                {
                    b.Property<string>("Purchase_Order")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommodityID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Line_Item_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Line_Item_Total_Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Quantity_Ordered")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit_Of_Measure_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit_Of_Measure_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Unit_Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Purchase_Order", "CommodityID");

                    b.HasIndex("CommodityID");

                    b.ToTable("PurchaseOrderLines");
                });

            modelBuilder.Entity("ECommerceProcurementSystem.Models.Vendor", b =>
                {
                    b.Property<string>("Vendor_Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Vendor_Code");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("ECommerceProcurementSystem.Models.AnnualReport", b =>
                {
                    b.HasOne("ECommerceProcurementSystem.Models.City", "City")
                        .WithMany("AnnualReports")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceProcurementSystem.Models.Vendor", "Vendor")
                        .WithMany("AnnualReports")
                        .HasForeignKey("Vendor_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ECommerceProcurementSystem.Models.PurchaseOrder", b =>
                {
                    b.HasOne("ECommerceProcurementSystem.Models.MasterAgreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("Master_Agreement");

                    b.HasOne("ECommerceProcurementSystem.Models.Vendor", "Vendor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("Vendor_Code");

                    b.Navigation("Agreement");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ECommerceProcurementSystem.Models.PurchaseOrderLine", b =>
                {
                    b.HasOne("ECommerceProcurementSystem.Models.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("CommodityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceProcurementSystem.Models.PurchaseOrder", null)
                        .WithMany("Lines")
                        .HasForeignKey("Purchase_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commodity");
                });

            modelBuilder.Entity("ECommerceProcurementSystem.Models.City", b =>
                {
                    b.Navigation("AnnualReports");
                });

            modelBuilder.Entity("ECommerceProcurementSystem.Models.PurchaseOrder", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("ECommerceProcurementSystem.Models.Vendor", b =>
                {
                    b.Navigation("AnnualReports");

                    b.Navigation("PurchaseOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
